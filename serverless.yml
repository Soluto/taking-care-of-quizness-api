service: taking-care-of-quizness-api

provider:
  name: aws
  runtime: nodejs12.x
  environment:
#    User need to add the arn of the Cognito Authorizer
    AUTHORIZER_ARN: arn:aws:cognito-idp:us-east-1:245511257894:userpool/us-east-1_hqTnRp3AM
    DYNAMODB_TABLE: QuestionsTable
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"
  apiKeys:
    - takingCareOfQuizness-apiKey
  tags:
    BUSINESS_UNIT: HACKATHON
    PLATFORM: HACKATHON
    CLIENT: HACKATHON
    BUSINESS_REGION: NORTHAMERICA
    ENVIRONMENT: ${opt:stage}
  stackTags:
    BUSINESS_UNIT: HACKATHON
    PLATFORM: HACKATHON
    CLIENT: HACKATHON
    BUSINESS_REGION: NORTHAMERICA
    ENVIRONMENT: ${opt:stage}

functions:
  create:
    handler: app/create.create
    events:
      - http:
          method: post
          path: questions
          integration: lambda
          private: true
          cors: true
          authorizer:
            arn: ${self:provider.environment.AUTHORIZER_ARN}
          request:
            passThrough: WHEN_NO_TEMPLATES


  list:
    handler: app/list.list
    events:
      - http:
          method: get
          path: questions
          integration: lambda
          private: true
          cors: true
          authorizer:
            arn: ${self:provider.environment.AUTHORIZER_ARN}
          request:
            passThrough: WHEN_NO_TEMPLATES

resources:
  Resources:
    QuestionsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: questionId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
          - AttributeName: category
            AttributeType: S
        KeySchema:
          - AttributeName: questionId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: UserIdIndex
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: KEYS_ONLY
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
          - IndexName: CategoryIndex
            KeySchema:
              - AttributeName: category
                KeyType: HASH
            Projection:
              ProjectionType: KEYS_ONLY
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
    ApiGatewayMethodQuestionsPost:
      Type: "AWS::ApiGateway::Method"
      Properties:
        AuthorizationScopes:
          - quizResourceServer/questions.write
    ApiGatewayMethodQuestionsGet:
      Type: "AWS::ApiGateway::Method"
      Properties:
        AuthorizationScopes:
          - quizResourceServer/questions.read

